/*
 * Xero Accounting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xero.models.accounting;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.xero.models.accounting.AccountsPayable;
import com.xero.models.accounting.AccountsReceivable;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.LocalDateTime;
import org.threeten.bp.ZoneId;
import org.threeten.bp.Instant;
import org.threeten.bp.LocalDate;
import com.xero.api.StringUtil;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

/**
 * The raw AccountsReceivable(sales invoices) and AccountsPayable(bills) outstanding and overdue amounts, not converted to base currency (read only)
 */
@ApiModel(description = "The raw AccountsReceivable(sales invoices) and AccountsPayable(bills) outstanding and overdue amounts, not converted to base currency (read only)")

public class Balances {
  StringUtil util = new StringUtil();

  @JsonProperty("AccountsReceivable")
  private AccountsReceivable accountsReceivable;

  @JsonProperty("AccountsPayable")
  private AccountsPayable accountsPayable;
  /**
  * accountsReceivable
  * @param accountsReceivable  AccountsReceivable
  * @return Balances
  **/
  public Balances accountsReceivable(AccountsReceivable accountsReceivable) {
    this.accountsReceivable = accountsReceivable;
    return this;
  }

   /**
   * Get accountsReceivable
   * @return accountsReceivable
  **/
  @ApiModelProperty(value = "")
  /** 
   * accountsReceivable
   * @return accountsReceivable AccountsReceivable
  **/
  public AccountsReceivable getAccountsReceivable() {
    return accountsReceivable;
  }

  /** 
  * accountsReceivable
  * @param accountsReceivable  AccountsReceivable
  **/

  public void setAccountsReceivable(AccountsReceivable accountsReceivable) {
    this.accountsReceivable = accountsReceivable;
  }

  /**
  * accountsPayable
  * @param accountsPayable  AccountsPayable
  * @return Balances
  **/
  public Balances accountsPayable(AccountsPayable accountsPayable) {
    this.accountsPayable = accountsPayable;
    return this;
  }

   /**
   * Get accountsPayable
   * @return accountsPayable
  **/
  @ApiModelProperty(value = "")
  /** 
   * accountsPayable
   * @return accountsPayable AccountsPayable
  **/
  public AccountsPayable getAccountsPayable() {
    return accountsPayable;
  }

  /** 
  * accountsPayable
  * @param accountsPayable  AccountsPayable
  **/

  public void setAccountsPayable(AccountsPayable accountsPayable) {
    this.accountsPayable = accountsPayable;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Balances balances = (Balances) o;
    return Objects.equals(this.accountsReceivable, balances.accountsReceivable) &&
        Objects.equals(this.accountsPayable, balances.accountsPayable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountsReceivable, accountsPayable);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Balances {\n");
    sb.append("    accountsReceivable: ").append(toIndentedString(accountsReceivable)).append("\n");
    sb.append("    accountsPayable: ").append(toIndentedString(accountsPayable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

